(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{233:function(e,t,r){"use strict";r.r(t);var n=r(0),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"کنترل-نسخه"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#کنترل-نسخه"}},[e._v("#")]),e._v(" کنترل نسخه")]),e._v(" "),r("p",[e._v("برای اینکه بتونیم با همدیگه رو یه پروژه کار کنیم و به طور موازی چند کار رو پیش ببریم و به طور کلی تاریخچه کارهامون رو نگه داریم از ابزارهای کنترل نسخه مثل Git استفاده میکنیم.")]),e._v(" "),r("p",[e._v("ویدویی برای یادگیری گیت آماده شده که میتونید از "),r("a",{attrs:{href:"https://drive.google.com/open?id=1bi48QnW-uASTAEx8sdV5mvJsR41eUMed",target:"_blank",rel:"noopener noreferrer"}},[e._v("اینجا"),r("OutboundLink")],1),e._v(" دریافتش کنید.")]),e._v(" "),r("p",[e._v("علاوه بر اون می‌تونید از این "),r("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("لینک"),r("OutboundLink")],1),e._v(" به صورت تعاملی جلو برید و یاد بگیرید کار باهاش رو.")]),e._v(" "),r("p",[e._v("در رابطه با متن کامیت لاگ و اینکه از چه conventionی پیروی کنی هم این "),r("a",{attrs:{href:"https://gist.github.com/stephenparish/9941e89d80e2bc58a153",target:"_blank",rel:"noopener noreferrer"}},[e._v("لینک"),r("OutboundLink")],1),e._v(" رو بخون.")]),e._v(" "),r("h3",{attrs:{id:"تمرین"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#تمرین"}},[e._v("#")]),e._v(" تمرین")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("درباره gitignore مطالعه کنید و چند مورد از استفادش رو تو پروژه‌های مختلف (مثلاً اونایی که از npm استفاده کردن) رو ببینید.")])]),e._v(" "),r("li",[r("p",[e._v("فرض کنید رو یک برنچ در حال کد زدن هستید، برنچ مستر قبل از اینکه شما برنچتون رو با مستر مرج کنید تغییر میکنه، چطوری می‌تونید تغییرات مستر رو به کدتون اضافه کنین بدون اینکه کدهای خودتون به مشکل بخوره؟ اگه چند راه وجود داره بهترینش چیه به نظرتون؟ (مفاهیم rebase و stash رو مطالعه کنید).")])]),e._v(" "),r("li",[r("p",[e._v("ببینید چه جوری می‌شه کد الآنتون رو با کد یکی از کامیت‌های قبلی مقایسه کنید و به طور کلی چه طور می‌شه دو کامیت رو با هم مقایسه کرد؟")])]),e._v(" "),r("li",[r("p",[e._v("چطوری می‌تویند قبل از کامیت یه سری از فایل‌هایی که تغییر دادین رو به حالت اولیشون برگردونید؟(و نه همه‌ی فایل‌ها رو)")])]),e._v(" "),r("li",[r("p",[e._v("یکم با markdown آشنا بشین و سعی کنید یه README.md بنویسین، چند README خوب هم از پروژه‌های opensource بخونین و سعی کنید ساختار خوبی تو ذهنتون شکل بگیره.")])])]),e._v(" "),r("h3",{attrs:{id:"برای-مطالعه"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#برای-مطالعه"}},[e._v("#")]),e._v(" برای مطالعه")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://chris.beams.io/posts/git-commit/",target:"_blank",rel:"noopener noreferrer"}},[e._v("این مقاله"),r("OutboundLink")],1),e._v(" یه سری اصول و استاندارد در مورد متن کامیت مسیج‌هاست.")]),e._v(" "),r("li",[e._v("خوبه درباره‌ی semantic versioning در مهندسی نرم‌افزار مطالعه کنی. یک روش رایج هست که ما نسخه‌های پروژه‌هامون رو طبق این استاندارد نام‌گذاری می‌کنیم:\n"),r("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://semver.org"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);